
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 110ti
 */
public class Order_Detail_Demo extends javax.swing.JFrame {
    private String orderID,foodID,custID,remark,time,cost;
    private Customer customer;
    private String status;
    private Vendor vendor;
    private Order order = new Order();
    
    public Order_Detail_Demo(){}
    
    public Order_Detail_Demo(Vendor vendor, String orderID, String foodID, String custID, String time, String remark, String status, String cost) {
        initComponents();
        this.vendor = vendor;
        this.orderID= orderID;
        this.foodID = foodID;
        this.time= time;
        this.remark=remark;
        this.status=status;
        this.cost = cost;
        this.custID = custID;
        inputOrderID_TF.setEditable(false);
        inputFoodID_TF.setEditable(false);
        inputTime_TF.setEditable(false);
        inputOrderID_TF.setText(orderID);
        inputFoodID_TF.setText(foodID);
        inputTime_TF.setText(time);
        
        Dine_Rbtn.setActionCommand("Dine In");
        TakeAway_Rbtn.setActionCommand("Take Away");

        if (remark.equals("Dine In")) {
            Dine_Rbtn.setSelected(true);
            TakeAway_Rbtn.setSelected(false);
        } else if(remark.equals("Take Away")){
            Dine_Rbtn.setSelected(false);
            TakeAway_Rbtn.setSelected(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        inputOrderID_TF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        inputFoodID_TF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        inputTime_TF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Dine_Rbtn = new javax.swing.JRadioButton();
        TakeAway_Rbtn = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        Status_CB = new javax.swing.JComboBox<>();
        Save_btn = new javax.swing.JButton();
        Back_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputOrderID_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputOrderID_TFActionPerformed(evt);
            }
        });

        jLabel1.setText("Order ID:");

        inputFoodID_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFoodID_TFActionPerformed(evt);
            }
        });

        jLabel2.setText("Food");

        inputTime_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTime_TFActionPerformed(evt);
            }
        });

        jLabel3.setText("Time");

        jLabel4.setText("Remark:");

        buttonGroup1.add(Dine_Rbtn);
        Dine_Rbtn.setText("Dine in");

        buttonGroup1.add(TakeAway_Rbtn);
        TakeAway_Rbtn.setText("Take Away");
        TakeAway_Rbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TakeAway_RbtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Status:");

        Status_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PENDING", "PREPARING", "READY", "COMPLETED", "PICKED_UP", "CANCELLED" }));
        Status_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Status_CBActionPerformed(evt);
            }
        });

        Save_btn.setText("Save");
        Save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_btnActionPerformed(evt);
            }
        });

        Back_btn.setText("Back");
        Back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Save_btn)
                        .addGap(82, 82, 82)
                        .addComponent(Back_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(inputFoodID_TF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inputOrderID_TF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inputTime_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Status_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TakeAway_Rbtn)
                            .addComponent(Dine_Rbtn))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputOrderID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputFoodID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputTime_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Dine_Rbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TakeAway_Rbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Status_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Save_btn)
                    .addComponent(Back_btn))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputOrderID_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputOrderID_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputOrderID_TFActionPerformed

    private void inputFoodID_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFoodID_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFoodID_TFActionPerformed

    private void inputTime_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTime_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTime_TFActionPerformed

    private void TakeAway_RbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TakeAway_RbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TakeAway_RbtnActionPerformed

    private void Status_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Status_CBActionPerformed
    List<Object> container2 = new ArrayList(TextEditor.fileReader(TextEditor.FilePaths.NOTIFICATION));
    order.setUpdateStatus(Status_CB.getSelectedIndex());
    for (Object obj : container2) { 
            Notification n = (Notification) obj;
            if (vendor.getId().equals(n.getId()) && (n.getMessage().equals(Notification.Messages.ORDER) || n.getMessage().equals(Notification.Messages.PREPARE))){                //compare orderID in order table
                if (order.getStatus().equals("PREPARING")) {        
                    n.setMessage(Notification.Messages.PREPARE);
                }
                else if (order.getStatus().equals("READY")){
                    n.setMessage(Notification.Messages.READY);
                }
                else if (order.getStatus().equals("CANCELLED")){
                    n.setMessage(Notification.Messages.CANCEL);
                }
                TextEditor.textDelete(TextEditor.FilePaths.NOTIFICATION, n);    //Rewrite it all back
                TextEditor.fileWrite(TextEditor.FilePaths.NOTIFICATION, n);
            }
        }
    }//GEN-LAST:event_Status_CBActionPerformed

    private void Back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_btnActionPerformed
        this.dispose();
    }//GEN-LAST:event_Back_btnActionPerformed

    private void Save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_btnActionPerformed
        List<Object> container = new ArrayList<>(TextEditor.fileReader(TextEditor.FilePaths.HISTORY));
        String custid = null;
        double foodCost = 0;
        boolean check = false;
        boolean cancelled = false;
        
        for (Object obj : container) {
            Order order = (Order) obj;

            if (order.getId().equals(orderID)) {
                if (Status_CB.getSelectedItem().equals(Order.Status.CANCELLED)) {
                    updateCustomerBalance(order.getCustomerID(), order.getCost());
                    order.setStatus(Order.Status.CANCELLED);
                    order.setTime();
                    updateOrder(order);
                    JOptionPane.showMessageDialog(null, "Order Cancelled!");
                    check = true;
                    break;
                } else {
                    custid = order.getCustomerID();
                    foodCost = order.getCost();
                    order.setUpdateStatus(Status_CB.getSelectedIndex());
                    order.setTime();
                    System.out.println("New Status: " + order.getStatus());
                    updateOrder(order);
                    JOptionPane.showMessageDialog(null, "Order Updated!");
                    check = true;
                    cancelled = true;
                    break;
                }
            }
        }

        if (!check) {
            JOptionPane.showMessageDialog(null, "Order not exist!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        if (check && cancelled) {
            System.out.println("Please check: ");
            List<DataProvider> container2 = new ArrayList<>(TextEditor.fileReader(TextEditor.FilePaths.USER));
            for (DataProvider obj : container2) {
                if (obj instanceof Customer) {
                    Customer cust = (Customer) obj;
                    if (cust.getId().equals(custid)) {
                        double newBal = cust.getBal() + foodCost;
                        cust.setBal(String.valueOf(newBal));
                        System.out.println("New Balance: " + cust.getBal());
                        TextEditor.textDelete(TextEditor.FilePaths.USER, cust);
                        TextEditor.fileWrite(TextEditor.FilePaths.USER, cust);
                        break;
                    }
                }
            }
        }

    }//GEN-LAST:event_Save_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order_Detail_Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order_Detail_Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order_Detail_Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order_Detail_Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order_Detail_Demo().setVisible(true);
            }
        });
    }
    
    public String updateCustomerBalance(String id, double cost) {
        System.out.println("Please check: ");
        List<DataProvider> container = new ArrayList<>(TextEditor.fileReader(TextEditor.FilePaths.USER));
        for (DataProvider obj : container) {
            Customer cust = (Customer) obj;
            if (cust.getId().equals(id)) {
                double newBal = cust.getBal() + cost;
                cust.setBal(String.valueOf(newBal));
                System.out.println("New Balance: "+cust.getBal());
                TextEditor.textDelete(TextEditor.FilePaths.USER, cust);
                TextEditor.fileWrite(TextEditor.FilePaths.USER, cust);
                break;
            }
        }
        // Return null or throw an exception or return a default customer object
        return "Refunded";
    }
    
    // Separate method to update the order in the file
    private void updateOrder(Order order) {
        TextEditor.textDelete(TextEditor.FilePaths.HISTORY, order);
        TextEditor.fileWrite(TextEditor.FilePaths.HISTORY, order);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_btn;
    private javax.swing.JRadioButton Dine_Rbtn;
    private javax.swing.JButton Save_btn;
    private javax.swing.JComboBox<String> Status_CB;
    private javax.swing.JRadioButton TakeAway_Rbtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField inputFoodID_TF;
    private javax.swing.JTextField inputOrderID_TF;
    private javax.swing.JTextField inputTime_TF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
