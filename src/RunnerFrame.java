import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class RunnerFrame extends javax.swing.JFrame {

    private DeliveryRunner runner; //Stores runner's object when runner logs in
    private DefaultTableModel taskListModel = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) { // Disable cell editing for all cells    
            return false;     
        }        
    };
    private DefaultTableModel tasksModel = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) { // Disable cell editing for all cells  
            return false;       
        }        
    };
    private DefaultTableModel taskHistory = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) { // Disable cell editing for all cells 
            return false;        
        }        
    };
    private final String[] taskListColumns = {"Order ID", "Order Placed", "Vendor", "Customer ID", "Food", "Address"};
    private final String[] tasksColumns = {"Order ID", "Time Elapsed", "Vendor", "Customer ID", "Food", "Address"};
    private final String[] taskHistoryColumns = {"Order ID", "Order Completion", "Vendor", "Customer", "Food", "Address", "Profit", "Review"};
    private int taskListRow = -1; //-1 = absence of a selected row, can be used as conditions
    private int tasksRow = -1; //Different row selector for different tables
    TextEditor textEditor = new TextEditor();
    
    public RunnerFrame() { //Default constructor for testing purposes
        DeliveryRunner runner = new DeliveryRunner("testing", "testsubject");
        this.runner = runner;
        initComponents();
        taskListModel.setColumnIdentifiers(taskListColumns);
        tasksModel.setColumnIdentifiers(tasksColumns);
        taskHistory.setColumnIdentifiers(taskHistoryColumns);
        runnerHomeTitlelbl.setText("Welcome Runner " + runner.getId()); //Set title
        runnerHomeLoadTaskListProcess(); //Load tasks
        generateTotalRevenue(); //Set total revenue text for it's textbox
    }
    
    public RunnerFrame(DeliveryRunner runner) { //Runner object read from textfile and passed to runner frame after log in
        initComponents();
        taskListModel.setColumnIdentifiers(taskListColumns);
        tasksModel.setColumnIdentifiers(tasksColumns);
        taskHistory.setColumnIdentifiers(taskHistoryColumns);
        this.runner = runner;
        runnerHomeTitlelbl.setText("Welcome Runner " + runner.getId()); //Set title
        runnerHomeLoadTaskListProcess(); //Load tasks
        generateTotalRevenue(); //Set total revenue text for it's textbox
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        runnerTskHistorydialog = new javax.swing.JDialog();
        runnerTskHistorypn = new javax.swing.JScrollPane();
        runnerTskHistorytbl = new javax.swing.JTable();
        runnerHomeTitlelbl = new javax.swing.JLabel();
        runnerHomeLogOutbtn = new javax.swing.JButton();
        runnerHomeTaskpnl = new javax.swing.JScrollPane();
        runnerHomeTasklst = new javax.swing.JList<>();
        runnerHomePendingpnl = new javax.swing.JScrollPane();
        runnerHomePendinglst = new javax.swing.JList<>();
        runnerTaskAcceptbtn = new javax.swing.JButton();
        runnerHomeTaskHistbtn = new javax.swing.JButton();
        runnerHomeFailedbtn = new javax.swing.JButton();
        runnerHomeDeliveredbtn = new javax.swing.JButton();
        runnerHomeYeartxt = new javax.swing.JTextField();
        runnerHomeMonthtxt = new javax.swing.JTextField();
        runnerHomeDaylbl = new javax.swing.JLabel();
        runnerHomeMonthlbl = new javax.swing.JLabel();
        runnerHomeYearlbl = new javax.swing.JLabel();
        runnerHomeTotallbl = new javax.swing.JLabel();
        runnerHomeTotaltxt = new javax.swing.JTextField();
        runnerHomeDaytxt = new javax.swing.JTextField();
        runnerHomeTaskListpn = new javax.swing.JScrollPane();
        runnerHomeTaskListtbl = new javax.swing.JTable();
        runnerHomeTaskspn = new javax.swing.JScrollPane();
        runnerHomeTaskstbl = new javax.swing.JTable();
        runnerHomeCld = new com.toedter.calendar.JCalendar();

        runnerTskHistorydialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        runnerTskHistorydialog.setTitle("Task History");
        runnerTskHistorydialog.setLocation(new java.awt.Point(0, 0));
        runnerTskHistorydialog.setSize(new java.awt.Dimension(1000, 1000));

        runnerTskHistorytbl.setModel(taskHistory);
        runnerTskHistorytbl.getTableHeader().setReorderingAllowed(false);
        runnerTskHistorypn.setViewportView(runnerTskHistorytbl);

        javax.swing.GroupLayout runnerTskHistorydialogLayout = new javax.swing.GroupLayout(runnerTskHistorydialog.getContentPane());
        runnerTskHistorydialog.getContentPane().setLayout(runnerTskHistorydialogLayout);
        runnerTskHistorydialogLayout.setHorizontalGroup(
            runnerTskHistorydialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runnerTskHistorypn, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        runnerTskHistorydialogLayout.setVerticalGroup(
            runnerTskHistorydialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runnerTskHistorypn, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Delivery Runner Home Page");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Runner Homepage Frame"); // NOI18N
        setResizable(false);

        runnerHomeTitlelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        runnerHomeTitlelbl.setLabelFor(this);
        runnerHomeTitlelbl.setText("WELCOME HOME, DELIVERY RUNNER");
        runnerHomeTitlelbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 153, 153)));
        runnerHomeTitlelbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runnerHomeTitlelbl.setName("Runner Homepage Title"); // NOI18N
        getContentPane().add(runnerHomeTitlelbl);

        runnerHomeLogOutbtn.setText("LOG OUT");
        runnerHomeLogOutbtn.setName("Runner Home Page Log Out Button"); // NOI18N
        runnerHomeLogOutbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeLogOutbtnMouseClicked(evt);
            }
        });
        runnerHomeLogOutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runnerHomeLogOutbtnActionPerformed(evt);
            }
        });
        getContentPane().add(runnerHomeLogOutbtn);

        runnerHomeTaskpnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tasks", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        runnerHomeTaskpnl.setName("Runner Home Page Task List"); // NOI18N

        runnerHomeTasklst.setName("Runner Home Page Task Listbox"); // NOI18N
        runnerHomeTaskpnl.setViewportView(runnerHomeTasklst);

        getContentPane().add(runnerHomeTaskpnl);

        runnerHomePendingpnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pending Tasks", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        runnerHomePendingpnl.setName("Runner Home Page Pending Task Scrollpanel"); // NOI18N

        runnerHomePendinglst.setName("Runner Home Page Pending Task Listbox"); // NOI18N
        runnerHomePendingpnl.setViewportView(runnerHomePendinglst);
        runnerHomePendinglst.getAccessibleContext().setAccessibleParent(this);

        getContentPane().add(runnerHomePendingpnl);

        runnerTaskAcceptbtn.setText("Accept");
        runnerTaskAcceptbtn.setName("Runner Home Page Accept Task Button"); // NOI18N
        runnerTaskAcceptbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerTaskAcceptbtnMouseClicked(evt);
            }
        });
        runnerTaskAcceptbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runnerTaskAcceptbtnActionPerformed(evt);
            }
        });
        getContentPane().add(runnerTaskAcceptbtn);

        runnerHomeTaskHistbtn.setText("Task History");
        runnerHomeTaskHistbtn.setName("Runner Home Page Task History Button"); // NOI18N
        runnerHomeTaskHistbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeTaskHistbtnMouseClicked(evt);
            }
        });

        runnerHomeFailedbtn.setText("Failed");
        runnerHomeFailedbtn.setName("Runner Home Page Delivery Failed Button"); // NOI18N
        runnerHomeFailedbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeFailedbtnMouseClicked(evt);
            }
        });

        runnerHomeDeliveredbtn.setText("Delivered");
        runnerHomeDeliveredbtn.setName("Runner Home Page Delivered Button"); // NOI18N
        runnerHomeDeliveredbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeDeliveredbtnMouseClicked(evt);
            }
        });
        getContentPane().add(runnerHomeDeliveredbtn);

        runnerHomeYeartxt.setEditable(false);
        runnerHomeYeartxt.setName("Runner Home Page Yearly Revenue Text Field"); // NOI18N
        getContentPane().add(runnerHomeYeartxt);

        runnerHomeMonthtxt.setEditable(false);
        runnerHomeMonthtxt.setName("Runner Home Page Monthly Revenue Text Field"); // NOI18N
        getContentPane().add(runnerHomeMonthtxt);

        runnerHomeDaylbl.setText("Day:");
        runnerHomeDaylbl.setName("Runner Home Page Daily Revenue Label"); // NOI18N
        getContentPane().add(runnerHomeDaylbl);

        runnerHomeMonthlbl.setText("Month:");
        runnerHomeMonthlbl.setName("Runner Home Page Monthly Revenue Label"); // NOI18N
        getContentPane().add(runnerHomeMonthlbl);

        runnerHomeYearlbl.setText("Year:");
        runnerHomeYearlbl.setName("Runner Home Page Yearly Revenue Label"); // NOI18N
        getContentPane().add(runnerHomeYearlbl);

        runnerHomeTotallbl.setText("Total:");
        runnerHomeTotallbl.setName("Runner Home Page Total Revenue Label"); // NOI18N
        getContentPane().add(runnerHomeTotallbl);

        runnerHomeTotaltxt.setEditable(false);
        runnerHomeTotaltxt.setName("Runner Home Page Total Revenue Text Field"); // NOI18N
        getContentPane().add(runnerHomeTotaltxt);

        runnerHomeDaytxt.setEditable(false);
        runnerHomeDaytxt.setName("Runner Home Page Daily Revenue Textfield"); // NOI18N
        runnerHomeDaytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runnerHomeDaytxtActionPerformed(evt);
            }
        });

        runnerHomeTaskListpn.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Task List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        runnerHomeTaskListtbl.setModel(taskListModel);
        runnerHomeTaskListtbl.getTableHeader().setReorderingAllowed(false);
        runnerHomeTaskListtbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeTaskListtblMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                runnerHomeTaskListtblMouseReleased(evt);
            }
        });
        runnerHomeTaskListpn.setViewportView(runnerHomeTaskListtbl);

        runnerHomeTaskspn.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Accepted Tasks", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        runnerHomeTaskstbl.setModel(tasksModel);
        runnerHomeTaskstbl.getTableHeader().setReorderingAllowed(false);
        runnerHomeTaskstbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runnerHomeTaskstblMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                runnerHomeTaskstblMouseReleased(evt);
            }
        });
        runnerHomeTaskspn.setViewportView(runnerHomeTaskstbl);

        runnerHomeCld.setNullDateButtonText("");
        runnerHomeCld.setTodayButtonText("");
        runnerHomeCld.setWeekOfYearVisible(false);
        runnerHomeCld.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                runnerHomeCldPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runnerHomeTitlelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(runnerTaskAcceptbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(136, 136, 136)
                        .addComponent(runnerHomeTaskHistbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137)
                        .addComponent(runnerHomeDeliveredbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(runnerHomeFailedbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(runnerHomeLogOutbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(runnerHomeTaskListpn, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(runnerHomeTaskspn, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runnerHomeCld, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(runnerHomeDaylbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(runnerHomeMonthlbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(runnerHomeTotallbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(runnerHomeYearlbl, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(runnerHomeMonthtxt)
                                    .addComponent(runnerHomeYeartxt)
                                    .addComponent(runnerHomeDaytxt, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                    .addComponent(runnerHomeTotaltxt))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runnerHomeTitlelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(runnerHomeCld, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runnerHomeDaylbl)
                            .addComponent(runnerHomeDaytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runnerHomeMonthlbl)
                            .addComponent(runnerHomeMonthtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runnerHomeYeartxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runnerHomeYearlbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runnerHomeTotaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runnerHomeTotallbl)))
                    .addComponent(runnerHomeTaskListpn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runnerHomeTaskspn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runnerHomeLogOutbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(runnerHomeTaskHistbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(runnerHomeDeliveredbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(runnerTaskAcceptbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(runnerHomeFailedbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runnerHomeLoadTaskListProcess() { //Private internal function to reload task lists table
        taskListModel.setRowCount(0); //Clearing the model before adding
        List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
        for (Object obj : container) {
            DeliveryOrder dOrder = (DeliveryOrder) obj;
            if (dOrder.getStatusRunner().equals("SEARCHING")) {
                String[] rowDataArray = {
                    dOrder.getId(), //Retrieve order ID
                    dOrder.getTime(), //Retrieve time when order was placed
                    dOrder.getVendorName(), //Retrieve vendor's name
                    dOrder.getCustomerID(), //Retrieve customer ID
                    dOrder.getFood(), //Retrieve food name
                    dOrder.getAddress() //Retrieve address
                };
                taskListModel.addRow(rowDataArray);
            }
        }
    }
    
    private void runnerHomeLoadTaskProcess() { //Private internal function to reload tasks table
        tasksModel.setRowCount(0); //Clearing the model before adding
        List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
        for (Object obj : container) {
            DeliveryOrder dOrder = (DeliveryOrder) obj;
            if (dOrder.getStatusRunner().equals("DELIVERING") && dOrder.getRunner().equals(runner.getId())) {
                String[] rowDataArray = {
                    dOrder.getId(), //Retrieve order ID
                    dOrder.getTime(), //Retrieve time when order was placed
                    dOrder.getVendorName(), //Retrieve vendor's name
                    dOrder.getCustomerID(), //Retrieve customer ID
                    dOrder.getFood(), //Retrieve food name
                    dOrder.getAddress() //Retrieve address
                };
                tasksModel.addRow(rowDataArray);
            }
        }
    }    
    
    private void generateTotalRevenue() { //Private internal function to generate total revenue earned by runner
        double total = 0;
        List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
        for (Object obj : container) {
            DeliveryOrder dOrder = (DeliveryOrder) obj;
            if (dOrder.getStatusRunner().equals("DELIVERED") && dOrder.getRunner().equals(runner.getId())) {
                total += dOrder.getFee();
            }
        }
        runnerHomeTotaltxt.setText("$" + String.valueOf(total));
    }
        
    
    private void runnerHomeLogOutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runnerHomeLogOutbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runnerHomeLogOutbtnActionPerformed

    private void runnerTaskAcceptbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runnerTaskAcceptbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runnerTaskAcceptbtnActionPerformed

    private void runnerHomeDaytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runnerHomeDaytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runnerHomeDaytxtActionPerformed

    private void runnerHomeTaskstblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeTaskstblMouseReleased

    }//GEN-LAST:event_runnerHomeTaskstblMouseReleased

    private void runnerHomeTaskListtblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeTaskListtblMouseReleased

    }//GEN-LAST:event_runnerHomeTaskListtblMouseReleased

    private void runnerTaskAcceptbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerTaskAcceptbtnMouseClicked
        if (taskListRow != -1) { //Fill tasks table with accepted deliveries
            List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
            for (Object obj : container) { //Finalise delivery order by plugging in extra properties
                DeliveryOrder dOrder = (DeliveryOrder) obj;
                if (dOrder.getId().equals(String.valueOf(taskListModel.getValueAt(taskListRow, 0)))) {
                    dOrder.setRunner(runner); //Set the current runner
                    dOrder.setRunnerStatus(Order.Status.DELIVERING); //Set status
                    dOrder.setTime(); //Set current time
                    textEditor.textDelete(TextEditor.FilePaths.HISTORY, dOrder);
                    textEditor.fileWrite(TextEditor.FilePaths.HISTORY, dOrder); //Rewrite it all back
                    break; //Break out of the loop once done since only one order should be edited at a time
                }
            }
            taskListRow = -1; //Reset to no selected row after clicking
            runnerHomeLoadTaskProcess(); //Reload the tasks table
            runnerHomeLoadTaskListProcess(); //Reload the task list
        }
    }//GEN-LAST:event_runnerTaskAcceptbtnMouseClicked

    private void runnerHomeDeliveredbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeDeliveredbtnMouseClicked
        if (tasksRow != -1) { //Remove row after delivery success and set status
            List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
            for (Object obj : container) { //Finalise delivery order by plugging in extra properties
                DeliveryOrder dOrder = (DeliveryOrder) obj;
                if (dOrder.getId().equals(String.valueOf(tasksModel.getValueAt(tasksRow, 0)))) {
                    dOrder.setRunnerStatus(Order.Status.DELIVERED); //Set status
                    dOrder.setTime(); //Set current time
                    dOrder.payment(); //Pay runner and vendor
                    textEditor.textDelete(TextEditor.FilePaths.HISTORY, dOrder);
                    textEditor.fileWrite(TextEditor.FilePaths.HISTORY, dOrder); //Rewrite it all back
                    break; //Break out of the loop once done since only one order should be edited at a time
                }
            }
            tasksRow = -1; //Reset to no selected row after clicking
            runnerHomeLoadTaskProcess(); //Reload the tasks table
            runnerHomeLoadTaskListProcess(); //Reload the tasks
            generateTotalRevenue(); //Add to total revenue textbox
        }
    }//GEN-LAST:event_runnerHomeDeliveredbtnMouseClicked

    private void runnerHomeFailedbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeFailedbtnMouseClicked
        if (tasksRow != -1) { //Remove row after delivery failed and set status
            List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
            for (Object obj : container) { //Finalise delivery order by plugging in extra properties
                DeliveryOrder dOrder = (DeliveryOrder) obj;
                if (dOrder.getId().equals(String.valueOf(tasksModel.getValueAt(tasksRow, 0)))) {
                    dOrder.setRunnerStatus(Order.Status.SEARCHING); //Set status
                    textEditor.textDelete(TextEditor.FilePaths.HISTORY, dOrder);
                    textEditor.fileWrite(TextEditor.FilePaths.HISTORY, dOrder); //Rewrite it all back
                    break; //Break out of the loop once done since only one order should be edited at a time
                }
            }
            tasksRow = -1; //Reset to no selected row after clicking
            runnerHomeLoadTaskProcess(); //Reload the tasks table
            runnerHomeLoadTaskListProcess(); //Reload the tasks
        }
    }//GEN-LAST:event_runnerHomeFailedbtnMouseClicked

    private void runnerHomeCldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_runnerHomeCldPropertyChange
        Calendar date = runnerHomeCld.getCalendar(); //Retrieval of dates from jCalendar
        int day = date.get(date.DAY_OF_MONTH);
        int month = date.get(date.MONTH + 1);
        int year = date.get(date.YEAR);

        double dayFeeTxt = 0; //Initializes as zero everytime date changes so it doesnt accumulate from previous date selection
        double monthFeeTxt = 0;
        double yearFeeTxt = 0;
        
        List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
        for (Object obj : container) { //Conditional statement to filter revenue based on year, month and days
            DeliveryOrder dOrder = (DeliveryOrder) obj;
            if (dOrder.getStatusRunner().equals("DELIVERED") && dOrder.getRunner().equals(runner.getId())) {
                if (dOrder.getOrderYear() == year) {
                    yearFeeTxt += dOrder.getFee();
                    if (dOrder.getOrderMonth() == month) {
                        monthFeeTxt += dOrder.getFee();
                        if (dOrder.getOrderDay() == day) {
                            dayFeeTxt += dOrder.getFee();
                        }
                    }        
                }    
            }        
        }
        runnerHomeYeartxt.setText(String.valueOf("$" + yearFeeTxt));
        runnerHomeMonthtxt.setText(String.valueOf("$" + monthFeeTxt));
        runnerHomeDaytxt.setText(String.valueOf("$" + dayFeeTxt));
    }//GEN-LAST:event_runnerHomeCldPropertyChange

    private void runnerHomeLogOutbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeLogOutbtnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_runnerHomeLogOutbtnMouseClicked

    private void runnerHomeTaskHistbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeTaskHistbtnMouseClicked
        List<Object> container = new ArrayList(textEditor.fileReader(TextEditor.FilePaths.HISTORY));
        for (Object obj : container) {
            DeliveryOrder dOrder = (DeliveryOrder) obj;
            if (dOrder.getStatusRunner().equals("DELIVERED") && dOrder.getRunner().equals(runner.getId())) {
                String[] rowDataArray = {
                    dOrder.getId(), //Retrieve order ID
                    dOrder.getTime(), //Retrieve time when order was placed
                    dOrder.getVendorName(), //Retrieve vendor's name
                    dOrder.getCustomerID(), //Retrieve customer ID
                    dOrder.getFood(), //Retrieve food name
                    dOrder.getAddress(), //Retrieve address
                    String.valueOf(dOrder.getFee()), //Retrieve runner profits
                    dOrder.getReview() //Retrieve reviews
                };
                taskHistory.addRow(rowDataArray);
            }
        }
        runnerTskHistorydialog.setVisible(true); //Opens up a new dialog
        runnerTskHistorydialog.setLocationRelativeTo(null); //Centers dialog on screen
    }//GEN-LAST:event_runnerHomeTaskHistbtnMouseClicked

    private void runnerHomeTaskListtblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeTaskListtblMouseClicked
        taskListRow = runnerHomeTaskListtbl.getSelectedRow();
    }//GEN-LAST:event_runnerHomeTaskListtblMouseClicked

    private void runnerHomeTaskstblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runnerHomeTaskstblMouseClicked
        tasksRow = runnerHomeTaskstbl.getSelectedRow();
    }//GEN-LAST:event_runnerHomeTaskstblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunnerFrame().setVisible(true);
                int i = 5;
                TextEditor textEditor = new TextEditor();
                while (i > 0) {
                textEditor.fileReader(TextEditor.FilePaths.ORDER, runner);
                runnerHomeTasklst.
            }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JCalendar runnerHomeCld;
    private javax.swing.JLabel runnerHomeDaylbl;
    private javax.swing.JTextField runnerHomeDaytxt;
    private javax.swing.JButton runnerHomeDeliveredbtn;
    private javax.swing.JButton runnerHomeFailedbtn;
    private javax.swing.JButton runnerHomeLogOutbtn;
    private javax.swing.JLabel runnerHomeMonthlbl;
    private javax.swing.JTextField runnerHomeMonthtxt;
    private javax.swing.JList<String> runnerHomePendinglst;
    private javax.swing.JScrollPane runnerHomePendingpnl;
    private javax.swing.JButton runnerHomeTaskHistbtn;
    private javax.swing.JScrollPane runnerHomeTaskListpn;
    private javax.swing.JTable runnerHomeTaskListtbl;
    private javax.swing.JScrollPane runnerHomeTaskspn;
    private javax.swing.JTable runnerHomeTaskstbl;
    private javax.swing.JLabel runnerHomeTitlelbl;
    private javax.swing.JLabel runnerHomeTotallbl;
    private javax.swing.JTextField runnerHomeTotaltxt;
    private javax.swing.JLabel runnerHomeYearlbl;
    private javax.swing.JTextField runnerHomeYeartxt;
    private javax.swing.JButton runnerTaskAcceptbtn;
    private javax.swing.JDialog runnerTskHistorydialog;
    private javax.swing.JScrollPane runnerTskHistorypn;
    private javax.swing.JTable runnerTskHistorytbl;
    // End of variables declaration//GEN-END:variables
}
